var _ObsidianEvent_one_of_decls, _CreateEvent_one_of_decls, _DeleteEvent_one_of_decls, _RenameEvent_one_of_decls, _ModifyEvent_one_of_decls, _FileOpenEvent_one_of_decls, _Empty_one_of_decls;
import { __classPrivateFieldGet } from "tslib";
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: proto/obsidan-events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ObsidianEvent extends pb_1.Message {
    constructor(data) {
        super();
        _ObsidianEvent_one_of_decls.set(this, [[2, 3, 4, 5, 6]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("create" in data && data.create != undefined) {
                this.create = data.create;
            }
            if ("delete" in data && data.delete != undefined) {
                this.delete = data.delete;
            }
            if ("rename" in data && data.rename != undefined) {
                this.rename = data.rename;
            }
            if ("modify" in data && data.modify != undefined) {
                this.modify = data.modify;
            }
            if ("fileOpen" in data && data.fileOpen != undefined) {
                this.fileOpen = data.fileOpen;
            }
        }
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set timestamp(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get create() {
        return pb_1.Message.getWrapperField(this, CreateEvent, 2);
    }
    set create(value) {
        pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f")[0], value);
    }
    get has_create() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get delete() {
        return pb_1.Message.getWrapperField(this, DeleteEvent, 3);
    }
    set delete(value) {
        pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f")[0], value);
    }
    get has_delete() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get rename() {
        return pb_1.Message.getWrapperField(this, RenameEvent, 4);
    }
    set rename(value) {
        pb_1.Message.setOneofWrapperField(this, 4, __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f")[0], value);
    }
    get has_rename() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get modify() {
        return pb_1.Message.getWrapperField(this, ModifyEvent, 5);
    }
    set modify(value) {
        pb_1.Message.setOneofWrapperField(this, 5, __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f")[0], value);
    }
    get has_modify() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get fileOpen() {
        return pb_1.Message.getWrapperField(this, FileOpenEvent, 6);
    }
    set fileOpen(value) {
        pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, _ObsidianEvent_one_of_decls, "f")[0], value);
    }
    get has_fileOpen() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get event() {
        const cases = {
            0: "none",
            2: "create",
            3: "delete",
            4: "rename",
            5: "modify",
            6: "fileOpen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6])];
    }
    static fromObject(data) {
        const message = new ObsidianEvent({});
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.create != null) {
            message.create = CreateEvent.fromObject(data.create);
        }
        if (data.delete != null) {
            message.delete = DeleteEvent.fromObject(data.delete);
        }
        if (data.rename != null) {
            message.rename = RenameEvent.fromObject(data.rename);
        }
        if (data.modify != null) {
            message.modify = ModifyEvent.fromObject(data.modify);
        }
        if (data.fileOpen != null) {
            message.fileOpen = FileOpenEvent.fromObject(data.fileOpen);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.create != null) {
            data.create = this.create.toObject();
        }
        if (this.delete != null) {
            data.delete = this.delete.toObject();
        }
        if (this.rename != null) {
            data.rename = this.rename.toObject();
        }
        if (this.modify != null) {
            data.modify = this.modify.toObject();
        }
        if (this.fileOpen != null) {
            data.fileOpen = this.fileOpen.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.timestamp != 0)
            writer.writeInt64(1, this.timestamp);
        if (this.has_create)
            writer.writeMessage(2, this.create, () => this.create.serialize(writer));
        if (this.has_delete)
            writer.writeMessage(3, this.delete, () => this.delete.serialize(writer));
        if (this.has_rename)
            writer.writeMessage(4, this.rename, () => this.rename.serialize(writer));
        if (this.has_modify)
            writer.writeMessage(5, this.modify, () => this.modify.serialize(writer));
        if (this.has_fileOpen)
            writer.writeMessage(6, this.fileOpen, () => this.fileOpen.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ObsidianEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.timestamp = reader.readInt64();
                    break;
                case 2:
                    reader.readMessage(message.create, () => message.create = CreateEvent.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.delete, () => message.delete = DeleteEvent.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.rename, () => message.rename = RenameEvent.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.modify, () => message.modify = ModifyEvent.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.fileOpen, () => message.fileOpen = FileOpenEvent.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ObsidianEvent.deserialize(bytes);
    }
}
_ObsidianEvent_one_of_decls = new WeakMap();
export class CreateEvent extends pb_1.Message {
    constructor(data) {
        super();
        _CreateEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CreateEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filePath(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new CreateEvent({});
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filePath.length)
            writer.writeString(1, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return CreateEvent.deserialize(bytes);
    }
}
_CreateEvent_one_of_decls = new WeakMap();
export class DeleteEvent extends pb_1.Message {
    constructor(data) {
        super();
        _DeleteEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DeleteEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filePath(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new DeleteEvent({});
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filePath.length)
            writer.writeString(1, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DeleteEvent.deserialize(bytes);
    }
}
_DeleteEvent_one_of_decls = new WeakMap();
export class RenameEvent extends pb_1.Message {
    constructor(data) {
        super();
        _RenameEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _RenameEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("newPath" in data && data.newPath != undefined) {
                this.newPath = data.newPath;
            }
            if ("oldPath" in data && data.oldPath != undefined) {
                this.oldPath = data.oldPath;
            }
        }
    }
    get newPath() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set newPath(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get oldPath() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set oldPath(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new RenameEvent({});
        if (data.newPath != null) {
            message.newPath = data.newPath;
        }
        if (data.oldPath != null) {
            message.oldPath = data.oldPath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.newPath != null) {
            data.newPath = this.newPath;
        }
        if (this.oldPath != null) {
            data.oldPath = this.oldPath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.newPath.length)
            writer.writeString(1, this.newPath);
        if (this.oldPath.length)
            writer.writeString(2, this.oldPath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.newPath = reader.readString();
                    break;
                case 2:
                    message.oldPath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return RenameEvent.deserialize(bytes);
    }
}
_RenameEvent_one_of_decls = new WeakMap();
export class ModifyEvent extends pb_1.Message {
    constructor(data) {
        super();
        _ModifyEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ModifyEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filePath(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new ModifyEvent({});
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filePath.length)
            writer.writeString(1, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ModifyEvent.deserialize(bytes);
    }
}
_ModifyEvent_one_of_decls = new WeakMap();
export class FileOpenEvent extends pb_1.Message {
    constructor(data) {
        super();
        _FileOpenEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _FileOpenEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filePath(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new FileOpenEvent({});
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filePath.length)
            writer.writeString(1, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileOpenEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return FileOpenEvent.deserialize(bytes);
    }
}
_FileOpenEvent_one_of_decls = new WeakMap();
export class Empty extends pb_1.Message {
    constructor(data) {
        super();
        _Empty_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Empty_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data) {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data = {};
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Empty.deserialize(bytes);
    }
}
_Empty_one_of_decls = new WeakMap();
export class UnimplementedObsidianEventStreamService {
}
UnimplementedObsidianEventStreamService.definition = {
    streamEvents: {
        path: "/ObsidianEventStream/streamEvents",
        requestStream: true,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ObsidianEvent.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => Empty.deserialize(new Uint8Array(bytes))
    }
};
export class ObsidianEventStreamClient extends grpc_1.makeGenericClientConstructor(UnimplementedObsidianEventStreamService.definition, "ObsidianEventStream", {}) {
    constructor(address, credentials, options) {
        super(address, credentials, options);
        this.streamEvents = (metadata, options, callback) => {
            return super.streamEvents(metadata, options, callback);
        };
    }
}
//# sourceMappingURL=data:application/json;base64,