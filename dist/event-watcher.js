/*
  A convenient way to connect event handlers to the listening mechanism in Obsidian.
  This base class performs the creation and registration of EventRefs, while the
  subclasses implement the actual event handling logic for each event type.
 */
export default class EventWatcher {
    constructor(plugin) {
        this.eventCreationOverloads = {
            create: (callback) => this.plugin.app.vault.on("create", callback),
            delete: (callback) => this.plugin.app.vault.on("delete", callback),
            rename: (callback) => this.plugin.app.vault.on("rename", callback),
            modify: (callback) => this.plugin.app.vault.on("modify", callback),
            file_open: (callback) => this.plugin.app.workspace.on("file-open", callback),
        };
        this.eventHandlerOverloads = {
            create: this.onCreate,
            delete: this.onDelete,
            rename: this.onRename,
            modify: this.onModify,
            file_open: this.onFileOpen,
        };
        this.plugin = plugin;
        this.registerAllEvents();
    }
    registerAllEvents() {
        for (const eventName in this.eventHandlerOverloads) {
            const eventType = eventName;
            this.registerEvent(eventType, this.eventHandlerOverloads[eventType]);
        }
    }
    registerEvent(eventType, callback) {
        this.plugin.registerEvent(this.eventCreationOverloads[eventType](callback));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtd2F0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ldmVudC13YXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsT0FBTyxPQUFnQixZQUFZO0lBb0J6QyxZQUFZLE1BQWM7UUFqQmxCLDJCQUFzQixHQUFxQjtZQUNsRCxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztZQUNsRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztZQUNsRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztZQUNsRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztZQUNsRSxTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7U0FDcEQsQ0FBQztRQUVNLDBCQUFxQixHQUFxQjtZQUNqRCxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFHRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU8saUJBQWlCO1FBQ3hCLEtBQUssTUFBTSxTQUFTLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQ25ELE1BQU0sU0FBUyxHQUFHLFNBQXNCLENBQUM7WUFDekMsSUFBSSxDQUFDLGFBQWEsQ0FDakIsU0FBUyxFQUNULElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FDckMsQ0FBQztTQUNGO0lBQ0YsQ0FBQztJQUVPLGFBQWEsQ0FDcEIsU0FBWSxFQUNaLFFBQTBCO1FBRTFCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUN4QixJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQ2hELENBQUM7SUFDSCxDQUFDO0NBUUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudFJlZiwgUGx1Z2luLCBUQWJzdHJhY3RGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbnR5cGUgRXZlbnRDcmVhdGlvbk1hcCA9IHtcblx0W0UgaW4gRXZlbnROYW1lXTogKGNhbGxiYWNrOiBFdmVudENhbGxiYWNrW0VdKSA9PiBFdmVudFJlZjtcbn07XG5cbi8qXG4gIEEgY29udmVuaWVudCB3YXkgdG8gY29ubmVjdCBldmVudCBoYW5kbGVycyB0byB0aGUgbGlzdGVuaW5nIG1lY2hhbmlzbSBpbiBPYnNpZGlhbi5cbiAgVGhpcyBiYXNlIGNsYXNzIHBlcmZvcm1zIHRoZSBjcmVhdGlvbiBhbmQgcmVnaXN0cmF0aW9uIG9mIEV2ZW50UmVmcywgd2hpbGUgdGhlXG4gIHN1YmNsYXNzZXMgaW1wbGVtZW50IHRoZSBhY3R1YWwgZXZlbnQgaGFuZGxpbmcgbG9naWMgZm9yIGVhY2ggZXZlbnQgdHlwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgRXZlbnRXYXRjaGVyIHtcblx0cHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFBsdWdpbjtcblxuXHRwcml2YXRlIGV2ZW50Q3JlYXRpb25PdmVybG9hZHM6IEV2ZW50Q3JlYXRpb25NYXAgPSB7XG5cdFx0Y3JlYXRlOiAoY2FsbGJhY2spID0+IHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbihcImNyZWF0ZVwiLCBjYWxsYmFjayksXG5cdFx0ZGVsZXRlOiAoY2FsbGJhY2spID0+IHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbihcImRlbGV0ZVwiLCBjYWxsYmFjayksXG5cdFx0cmVuYW1lOiAoY2FsbGJhY2spID0+IHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbihcInJlbmFtZVwiLCBjYWxsYmFjayksXG5cdFx0bW9kaWZ5OiAoY2FsbGJhY2spID0+IHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCBjYWxsYmFjayksXG5cdFx0ZmlsZV9vcGVuOiAoY2FsbGJhY2spID0+XG5cdFx0XHR0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9uKFwiZmlsZS1vcGVuXCIsIGNhbGxiYWNrKSxcblx0fTtcblxuXHRwcml2YXRlIGV2ZW50SGFuZGxlck92ZXJsb2FkczogRXZlbnRDYWxsYmFja01hcCA9IHtcblx0XHRjcmVhdGU6IHRoaXMub25DcmVhdGUsXG5cdFx0ZGVsZXRlOiB0aGlzLm9uRGVsZXRlLFxuXHRcdHJlbmFtZTogdGhpcy5vblJlbmFtZSxcblx0XHRtb2RpZnk6IHRoaXMub25Nb2RpZnksXG5cdFx0ZmlsZV9vcGVuOiB0aGlzLm9uRmlsZU9wZW4sXG5cdH07XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblxuXHRcdHRoaXMucmVnaXN0ZXJBbGxFdmVudHMoKTtcblx0fVxuXG5cdHByaXZhdGUgcmVnaXN0ZXJBbGxFdmVudHMoKSB7XG5cdFx0Zm9yIChjb25zdCBldmVudE5hbWUgaW4gdGhpcy5ldmVudEhhbmRsZXJPdmVybG9hZHMpIHtcblx0XHRcdGNvbnN0IGV2ZW50VHlwZSA9IGV2ZW50TmFtZSBhcyBFdmVudE5hbWU7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHRcdGV2ZW50VHlwZSxcblx0XHRcdFx0dGhpcy5ldmVudEhhbmRsZXJPdmVybG9hZHNbZXZlbnRUeXBlXVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHJlZ2lzdGVyRXZlbnQ8RSBleHRlbmRzIEV2ZW50TmFtZT4oXG5cdFx0ZXZlbnRUeXBlOiBFLFxuXHRcdGNhbGxiYWNrOiBFdmVudENhbGxiYWNrW0VdXG5cdCk6IHZvaWQge1xuXHRcdHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmV2ZW50Q3JlYXRpb25PdmVybG9hZHNbZXZlbnRUeXBlXShjYWxsYmFjaylcblx0XHQpO1xuXHR9XG5cblx0Ly8gQ3VzdG9taXphdGlvbiBwb2ludHNcblx0cHJvdGVjdGVkIGFic3RyYWN0IG9uQ3JlYXRlKGZpbGU6IFRBYnN0cmFjdEZpbGUpOiB2b2lkO1xuXHRwcm90ZWN0ZWQgYWJzdHJhY3Qgb25EZWxldGUoZmlsZTogVEFic3RyYWN0RmlsZSk6IHZvaWQ7XG5cdHByb3RlY3RlZCBhYnN0cmFjdCBvblJlbmFtZShmaWxlOiBUQWJzdHJhY3RGaWxlLCBvbGRQYXRoOiBzdHJpbmcpOiB2b2lkO1xuXHRwcm90ZWN0ZWQgYWJzdHJhY3Qgb25Nb2RpZnkoZmlsZTogVEFic3RyYWN0RmlsZSk6IHZvaWQ7XG5cdHByb3RlY3RlZCBhYnN0cmFjdCBvbkZpbGVPcGVuKGZpbGU6IFRBYnN0cmFjdEZpbGUgfCBudWxsKTogdm9pZDtcbn1cbiJdfQ==